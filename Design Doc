Bestiary


- One page app(well 2)
	- Search/list
	- Edit view(of the creature)

- Dice rolling strategies
- Transfomers(from 3.5 to PF, etc.)



- Generate mooks functionality
	- Choose array (elite, etc)
	- Choose level/class (including ranges, from a specific list, etc.)
	- Choose prefer stats(e.g. dex, dex OR str)
	- Templates: set what things can vary in what way

- When a creature has an ability where a choice must be made, highlight that ability(yellow border, bg, whatever)



- Basic data structures (v3)

1. Number, the number is actually a node in a directed graph, figure out the implementation details, the only valid graph search is to ensure no cycles
    - identifier [unique]
    - label
    - parents (a list of Numbers, we definitely need this, so we can use them in basic calculations)
    - children (a list of Numbers)
    - type
    - baseValue
    - computer (a pointer to a predefined function like "add" or a user script, must return a Computation)
    - cachedValue
    
2. Computation
    - result
    - displayableRepresentation

3. Entity
    - A collection of numbers




















Anani's suggested structure v2:

Rule library/registry (list)
Creature library (list)
Authentication and authorization related structures (w/e, not relevant)

Creature
- label
- id
- ruleset (list)
- Pool list
- Conditionals list

Rule
- id
- label
- notes
- tag list 
- script(
-- create pool
-- add modifier to pool
-- define function/lookup
-- create conditional
-- create content block
)

Function (always pure?) 
- id
- params
- script

Pool (all include user input)
- id
- label
- tag list
- modifier list
- calculated

Modifier
- add = (
-- input? 
-- 2 (flat) 
-- dex (id)
-- bonusSpells(wis, spelllevel) (function/lookup)
-- ivan.dex (cross entity reference) 
) 
- multiply
- description
- type (to determine stacking)
- source

Conditional
- name/id
- condition script
- currentState flag
- onTrue script
- onFalse script

Content block:
- user input
- view template?
